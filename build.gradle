plugins {
    id 'java'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}


group = 'org.pack'
version = '1.0-SNAPSHOT'

project.ext {
    lwjglVersion = '3.3.6'         // Updated version
    jomlVersion = '1.10.7'         // Updated version
    lwjglNatives = 'natives-windows'
    imguiVersion = '1.81.0'
}
repositories {
    flatDir { dirs 'libs' }
    mavenCentral()
}

dependencies {

    // Box2D
    implementation name: 'jbox2d-library'

    // JUnit
    testImplementation 'junit:junit:4.13.2'

    // GSON
    implementation 'com.google.code.gson:gson:2.8.9'

    // ImGUI
    implementation "io.github.spair:imgui-java-app:$imguiVersion"

    // LWJGL with Natives
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")
    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-nfd"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nfd::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"

    // JOML
    implementation "org.joml:joml:$jomlVersion"

    //--
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    // lombok
    implementation 'org.projectlombok:lombok:1.18.30' // Adjust version as needed
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes(
                'Class-Path': configurations.runtimeClasspath.files.collect { it.name }.join(' '),
                'Main-Class': 'org.pack.Main' // Replace with your Main class
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task copyAssets(type: Copy) {
    from 'assets'
    into "${buildDir}/libs/assets"
    from 'level.txt'
    into "${buildDir}/libs"
}

task fatJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE  // Exclude duplicates
    manifest.from jar.manifest
    archiveClassifier.set('all')
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

fatJar.dependsOn(copyAssets)

artifacts {
    archives fatJar
}
